<?php
use Symfony\Component\Yaml\Yaml;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\taxonomy\Entity\Term;
use Drupal\dhis\Entity\OrganisationUnit;
use Drupal\dhis\Entity\DataElement;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * @file
 * Contains dhis.install
 */

/**
 * Implements hook_install.
 */
function dhis_install() {
  $module_path = drupal_get_path('module', 'dhis');
  $file_contents_periods = file_get_contents($module_path . '/dhis.periods.yml');
  $periods = Yaml::parse($file_contents_periods);
  $vid = 'dhis_period';
  $period_voc_params = [
    'name' => 'Dhis2 Periods',
    'vid' => $vid, 'description' => 'DHIS2 Relative Periods',
    'activate' => 1
  ];
  createVocabulary($period_voc_params);

  FieldStorageConfig::create(
    array(
      'field_name' => 'activate',
      'entity_type' => 'taxonomy_term',
      'type' => 'boolean',
      'settings' => [
        'max_length' => '1',
      ],
      'cardinality' => 1,
    )
  )->save();

  FieldConfig::create([
    'field_name' => 'activate',
    'entity_type' => 'taxonomy_term',
    'bundle' => $vid,
    'label' => 'Activate',
    'field_type' => 'boolean',
    'widget' => []
  ])->save();

  foreach ($periods['dhis.periods'] as $key => $value) {
    Term::create([
      'name' => $key,
      'vid' => $vid,
      'description' => $value
    ])->save();
  }
}

/**
 * Implements hook_uninstall.
 */
function dhis_uninstall() {
  print('Starting uninstall process');
  $module_path = drupal_get_path('module', 'dhis');
  $file_contents_accounts = file_get_contents($module_path . '/dhis.accounts.yml');
  $accounts = Yaml::parse($file_contents_accounts);
  $countries = $accounts['dhis_accounts']['countries'];

  $entities = ['data_element', 'organisation_unit', 'dhis_period'];

  foreach($countries as $key => $value){
    array_push($entities, $key.'_dataelements');
  }

  foreach ($entities as $entity) {
    $vids = [];
    try {
      if ($entity == 'data_element') {
        $vids = DataElement::loadMultiple();
        deleteCustomEntity($entity, $vids);
      }
      if ($entity == 'organisation_unit') {
        $vids = OrganisationUnit::loadMultiple();
        deleteCustomEntity($entity, $vids);
      }
    } catch (\Drupal\Core\Entity\Exception\NoCorrespondingEntityClassException $e) {
      print($e->getMessage());
    }
    deleteVocabulary($entity);
  }
  $entity_settings = ['OrganisationUnit_settings', 'DataElement_settings'];

  foreach ($entity_settings as $entity_setting) {
    \Drupal::configFactory()->getEditable($entity_setting)->delete();
  }
}

function deleteVocabulary($vid) {
  $vocab = Vocabulary::load($vid);
  if ($vocab) {
    $vocab->delete();
  }
}

function deleteCustomEntity($entity, $vids) {
  if ($vids) {
    \Drupal::entityTypeManager()->getStorage($entity)->delete($vids);
  }
}

function createVocabulary(array $params){
  $vocabulary = Vocabulary::create($params)->save();
}